// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createList = `-- name: CreateList :execresult
INSERT INTO lists (
  name, userId
) VALUES (
?, ?
)
`

type CreateListParams struct {
	Name   string `json:"name,omitempty"`
	Userid int32  `json:"userid,omitempty"`
}

func (q *Queries) CreateList(ctx context.Context, arg CreateListParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createList, arg.Name, arg.Userid)
}

const createTask = `-- name: CreateTask :execresult

INSERT INTO tasks (
  text, listId, userId, completed
) VALUES (
 ?, ?, ?, ?
)
`

type CreateTaskParams struct {
	Text      string      `json:"text,omitempty"`
	Listid    int32       `json:"listid,omitempty"`
	Userid    int32       `json:"userid,omitempty"`
	Completed interface{} `json:"completed,omitempty"`
}

// query.sql
func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTask,
		arg.Text,
		arg.Listid,
		arg.Userid,
		arg.Completed,
	)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
  username, password, datestamp
) VALUES (
 ?, ?, ?
)
`

type CreateUserParams struct {
	Username  string    `json:"username,omitempty"`
	Password  string    `json:"password,omitempty"`
	Datestamp time.Time `json:"datestamp,omitempty"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.Username, arg.Password, arg.Datestamp)
}

const deleteListsById = `-- name: DeleteListsById :exec
DELETE FROM lists
WHERE id = ?
`

func (q *Queries) DeleteListsById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteListsById, id)
	return err
}

const deleteTaskById = `-- name: DeleteTaskById :exec
DELETE FROM tasks
WHERE id = ?
`

func (q *Queries) DeleteTaskById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTaskById, id)
	return err
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUserById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserById, id)
	return err
}

const deleteUserByUsername = `-- name: DeleteUserByUsername :exec
DELETE FROM users
WHERE username = ?
`

func (q *Queries) DeleteUserByUsername(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUserByUsername, username)
	return err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password, datestamp FROM users
WHERE username = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Datestamp,
	)
	return i, err
}

const listListsByUserId = `-- name: ListListsByUserId :many
SELECT id, name, userid FROM lists
WHERE userId = ?
`

func (q *Queries) ListListsByUserId(ctx context.Context, userid int32) ([]List, error) {
	rows, err := q.db.QueryContext(ctx, listListsByUserId, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []List
	for rows.Next() {
		var i List
		if err := rows.Scan(&i.ID, &i.Name, &i.Userid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasksByUserId = `-- name: ListTasksByUserId :many
SELECT id, text, listid, userid, completed FROM tasks
WHERE userId = ?
`

func (q *Queries) ListTasksByUserId(ctx context.Context, userid int32) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasksByUserId, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.Listid,
			&i.Userid,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :execresult
UPDATE tasks
SET completed = true
WHERE id = ?
`

func (q *Queries) UpdateTask(ctx context.Context, id int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateTask, id)
}
