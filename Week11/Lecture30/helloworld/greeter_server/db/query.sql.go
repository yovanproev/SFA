// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createStory = `-- name: CreateStory :execresult

INSERT INTO items (
  Title, Score, DateStamp
) VALUES (
 ?, ?, ?
)
`

type CreateStoryParams struct {
	Title     string
	Score     int32
	DateStamp time.Time
}

// query.sql
func (q *Queries) CreateStory(ctx context.Context, arg CreateStoryParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createStory, arg.Title, arg.Score, arg.DateStamp)
}

const deleteStory = `-- name: DeleteStory :exec
DELETE FROM items
WHERE id = ?
`

func (q *Queries) DeleteStory(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteStory, id)
	return err
}

const getLastStory = `-- name: GetLastStory :one
SELECT id, title, score, datestamp FROM items
ORDER BY DateStamp DESC
LIMIT 1
`

func (q *Queries) GetLastStory(ctx context.Context) (Item, error) {
	row := q.db.QueryRowContext(ctx, getLastStory)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Score,
		&i.DateStamp,
	)
	return i, err
}

const listStories = `-- name: ListStories :many
SELECT id, title, score, datestamp FROM items
ORDER BY DateStamp DESC
LIMIT 10
`

func (q *Queries) ListStories(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listStories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Score,
			&i.DateStamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
