// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: helloworld/helloworld.proto

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TopStoriesServiceClient is the client API for TopStoriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopStoriesServiceClient interface {
	FetchStories(ctx context.Context, in *Story, opts ...grpc.CallOption) (*My_Replies, error)
}

type topStoriesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTopStoriesServiceClient(cc grpc.ClientConnInterface) TopStoriesServiceClient {
	return &topStoriesServiceClient{cc}
}

func (c *topStoriesServiceClient) FetchStories(ctx context.Context, in *Story, opts ...grpc.CallOption) (*My_Replies, error) {
	out := new(My_Replies)
	err := c.cc.Invoke(ctx, "/helloworld.TopStoriesService/FetchStories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopStoriesServiceServer is the server API for TopStoriesService service.
// All implementations must embed UnimplementedTopStoriesServiceServer
// for forward compatibility
type TopStoriesServiceServer interface {
	FetchStories(context.Context, *Story) (*My_Replies, error)
	mustEmbedUnimplementedTopStoriesServiceServer()
}

// UnimplementedTopStoriesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTopStoriesServiceServer struct {
}

func (UnimplementedTopStoriesServiceServer) FetchStories(context.Context, *Story) (*My_Replies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchStories not implemented")
}
func (UnimplementedTopStoriesServiceServer) mustEmbedUnimplementedTopStoriesServiceServer() {}

// UnsafeTopStoriesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopStoriesServiceServer will
// result in compilation errors.
type UnsafeTopStoriesServiceServer interface {
	mustEmbedUnimplementedTopStoriesServiceServer()
}

func RegisterTopStoriesServiceServer(s grpc.ServiceRegistrar, srv TopStoriesServiceServer) {
	s.RegisterService(&TopStoriesService_ServiceDesc, srv)
}

func _TopStoriesService_FetchStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Story)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopStoriesServiceServer).FetchStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.TopStoriesService/FetchStories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopStoriesServiceServer).FetchStories(ctx, req.(*Story))
	}
	return interceptor(ctx, in, info, handler)
}

// TopStoriesService_ServiceDesc is the grpc.ServiceDesc for TopStoriesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopStoriesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.TopStoriesService",
	HandlerType: (*TopStoriesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchStories",
			Handler:    _TopStoriesService_FetchStories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/helloworld.proto",
}
